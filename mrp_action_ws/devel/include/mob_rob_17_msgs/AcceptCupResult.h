// Generated by gencpp from file mob_rob_17_msgs/AcceptCupResult.msg
// DO NOT EDIT!


#ifndef MOB_ROB_17_MSGS_MESSAGE_ACCEPTCUPRESULT_H
#define MOB_ROB_17_MSGS_MESSAGE_ACCEPTCUPRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mob_rob_17_msgs
{
template <class ContainerAllocator>
struct AcceptCupResult_
{
  typedef AcceptCupResult_<ContainerAllocator> Type;

  AcceptCupResult_()
    : result_code(0)  {
    }
  AcceptCupResult_(const ContainerAllocator& _alloc)
    : result_code(0)  {
  (void)_alloc;
    }



   typedef uint16_t _result_code_type;
  _result_code_type result_code;




  typedef boost::shared_ptr< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> const> ConstPtr;

}; // struct AcceptCupResult_

typedef ::mob_rob_17_msgs::AcceptCupResult_<std::allocator<void> > AcceptCupResult;

typedef boost::shared_ptr< ::mob_rob_17_msgs::AcceptCupResult > AcceptCupResultPtr;
typedef boost::shared_ptr< ::mob_rob_17_msgs::AcceptCupResult const> AcceptCupResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mob_rob_17_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mob_rob_17_msgs': ['/home/seba/MRP/MRP-Praktikum/mrp_action_ws/devel/share/mob_rob_17_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a328be338a7a89d3b5bba0d2781350c3";
  }

  static const char* value(const ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa328be338a7a89d3ULL;
  static const uint64_t static_value2 = 0xb5bba0d2781350c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mob_rob_17_msgs/AcceptCupResult";
  }

  static const char* value(const ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# ------------ Result --------------\n\
#   Whether cup was successfully accepted from the user\n\
#   and placed on the mobile platform or which kind of failure\n\
#   occurred.\n\
#   Error codes:\n\
#     200 Success.\n\
#     301 Cup not reachable.\n\
#     302 Mobile platform not reachable.\n\
#     401 Cup not found.\n\
#     402 Mobile platform not found.\n\
#     500 Path planning failed.\n\
#     600 Unknown.\n\
\n\
uint16 result_code\n\
";
  }

  static const char* value(const ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AcceptCupResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mob_rob_17_msgs::AcceptCupResult_<ContainerAllocator>& v)
  {
    s << indent << "result_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.result_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOB_ROB_17_MSGS_MESSAGE_ACCEPTCUPRESULT_H
